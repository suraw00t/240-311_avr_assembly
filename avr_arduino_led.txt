
C:\Users\surawut\AppData\Local\Temp\arduino_build_797346\sketch_jan07b.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__ctors_end>
   4:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
   8:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
   c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  10:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  14:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  18:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  1c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  20:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  24:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  28:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  2c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  30:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  34:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  38:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  3c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  40:	0c 94 83 01 	jmp	0x306	; 0x306 <__vector_16>
  44:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  48:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  4c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  50:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  54:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  58:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  5c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  60:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  64:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 00       	nop
  6c:	24 00       	.word	0x0024	; ????
  6e:	27 00       	.word	0x0027	; ????
  70:	2a 00       	.word	0x002a	; ????

00000072 <port_to_output_PGM>:
  72:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000007c <digital_pin_to_port_PGM>:
  7c:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  8c:	03 03 03 03                                         ....

00000090 <digital_pin_to_bit_mask_PGM>:
  90:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  a0:	04 08 10 20                                         ... 

000000a4 <digital_pin_to_timer_PGM>:
  a4:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
  b4:	00 00 00 00                                         ....

000000b8 <__ctors_end>:
  b8:	11 24       	eor	r1, r1
  ba:	1f be       	out	0x3f, r1	; 63
  bc:	cf ef       	ldi	r28, 0xFF	; 255
  be:	d8 e0       	ldi	r29, 0x08	; 8
  c0:	de bf       	out	0x3e, r29	; 62
  c2:	cd bf       	out	0x3d, r28	; 61

000000c4 <__do_clear_bss>:
  c4:	21 e0       	ldi	r18, 0x01	; 1
  c6:	a0 e0       	ldi	r26, 0x00	; 0
  c8:	b1 e0       	ldi	r27, 0x01	; 1
  ca:	01 c0       	rjmp	.+2      	; 0xce <.do_clear_bss_start>

000000cc <.do_clear_bss_loop>:
  cc:	1d 92       	st	X+, r1

000000ce <.do_clear_bss_start>:
  ce:	a9 30       	cpi	r26, 0x09	; 9
  d0:	b2 07       	cpc	r27, r18
  d2:	e1 f7       	brne	.-8      	; 0xcc <.do_clear_bss_loop>
  d4:	0e 94 cd 01 	call	0x39a	; 0x39a <main>
  d8:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <_exit>

000000dc <__bad_interrupt>:
  dc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e0 <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	fc 01       	movw	r30, r24
  e4:	ec 55       	subi	r30, 0x5C	; 92
  e6:	ff 4f       	sbci	r31, 0xFF	; 255
  e8:	24 91       	lpm	r18, Z
	uint8_t bit = digitalPinToBitMask(pin);
  ea:	fc 01       	movw	r30, r24
  ec:	e0 57       	subi	r30, 0x70	; 112
  ee:	ff 4f       	sbci	r31, 0xFF	; 255
  f0:	34 91       	lpm	r19, Z
	uint8_t port = digitalPinToPort(pin);
  f2:	fc 01       	movw	r30, r24
  f4:	e4 58       	subi	r30, 0x84	; 132
  f6:	ff 4f       	sbci	r31, 0xFF	; 255
  f8:	e4 91       	lpm	r30, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
  fa:	ee 23       	and	r30, r30
  fc:	c9 f0       	breq	.+50     	; 0x130 <digitalWrite+0x50>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
  fe:	22 23       	and	r18, r18
 100:	39 f0       	breq	.+14     	; 0x110 <digitalWrite+0x30>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 102:	23 30       	cpi	r18, 0x03	; 3
 104:	01 f1       	breq	.+64     	; 0x146 <digitalWrite+0x66>
 106:	a8 f4       	brcc	.+42     	; 0x132 <digitalWrite+0x52>
 108:	21 30       	cpi	r18, 0x01	; 1
 10a:	19 f1       	breq	.+70     	; 0x152 <digitalWrite+0x72>
 10c:	22 30       	cpi	r18, 0x02	; 2
 10e:	29 f1       	breq	.+74     	; 0x15a <digitalWrite+0x7a>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	ee 0f       	add	r30, r30
 114:	ff 1f       	adc	r31, r31
 116:	ee 58       	subi	r30, 0x8E	; 142
 118:	ff 4f       	sbci	r31, 0xFF	; 255
 11a:	a5 91       	lpm	r26, Z+
 11c:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 11e:	8f b7       	in	r24, 0x3f	; 63
	cli();
 120:	f8 94       	cli

	if (val == LOW) {
		*out &= ~bit;
 122:	ec 91       	ld	r30, X
	out = portOutputRegister(port);

	uint8_t oldSREG = SREG;
	cli();

	if (val == LOW) {
 124:	61 11       	cpse	r22, r1
 126:	26 c0       	rjmp	.+76     	; 0x174 <digitalWrite+0x94>
		*out &= ~bit;
 128:	30 95       	com	r19
 12a:	3e 23       	and	r19, r30
	} else {
		*out |= bit;
 12c:	3c 93       	st	X, r19
	}

	SREG = oldSREG;
 12e:	8f bf       	out	0x3f, r24	; 63
}
 130:	08 95       	ret
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 132:	27 30       	cpi	r18, 0x07	; 7
 134:	a9 f0       	breq	.+42     	; 0x160 <digitalWrite+0x80>
 136:	28 30       	cpi	r18, 0x08	; 8
 138:	c9 f0       	breq	.+50     	; 0x16c <digitalWrite+0x8c>
 13a:	24 30       	cpi	r18, 0x04	; 4
 13c:	49 f7       	brne	.-46     	; 0x110 <digitalWrite+0x30>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 13e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
 142:	8f 7d       	andi	r24, 0xDF	; 223
 144:	03 c0       	rjmp	.+6      	; 0x14c <digitalWrite+0x6c>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 146:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
 14a:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 14c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
 150:	df cf       	rjmp	.-66     	; 0x110 <digitalWrite+0x30>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 152:	84 b5       	in	r24, 0x24	; 36
 154:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 156:	84 bd       	out	0x24, r24	; 36
 158:	db cf       	rjmp	.-74     	; 0x110 <digitalWrite+0x30>
 15a:	84 b5       	in	r24, 0x24	; 36
 15c:	8f 7d       	andi	r24, 0xDF	; 223
 15e:	fb cf       	rjmp	.-10     	; 0x156 <digitalWrite+0x76>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 160:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
 164:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 166:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
 16a:	d2 cf       	rjmp	.-92     	; 0x110 <digitalWrite+0x30>
 16c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
 170:	8f 7d       	andi	r24, 0xDF	; 223
 172:	f9 cf       	rjmp	.-14     	; 0x166 <digitalWrite+0x86>
	cli();

	if (val == LOW) {
		*out &= ~bit;
	} else {
		*out |= bit;
 174:	3e 2b       	or	r19, r30
 176:	da cf       	rjmp	.-76     	; 0x12c <digitalWrite+0x4c>

00000178 <analogWrite>:
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
 178:	48 2f       	mov	r20, r24
 17a:	50 e0       	ldi	r21, 0x00	; 0
 17c:	fa 01       	movw	r30, r20
 17e:	e0 57       	subi	r30, 0x70	; 112
 180:	ff 4f       	sbci	r31, 0xFF	; 255
 182:	94 91       	lpm	r25, Z
	uint8_t port = digitalPinToPort(pin);
 184:	fa 01       	movw	r30, r20
 186:	e4 58       	subi	r30, 0x84	; 132
 188:	ff 4f       	sbci	r31, 0xFF	; 255
 18a:	24 91       	lpm	r18, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 18c:	22 23       	and	r18, r18
 18e:	99 f0       	breq	.+38     	; 0x1b6 <analogWrite+0x3e>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	22 0f       	add	r18, r18
 194:	33 1f       	adc	r19, r19
 196:	f9 01       	movw	r30, r18
 198:	e8 59       	subi	r30, 0x98	; 152
 19a:	ff 4f       	sbci	r31, 0xFF	; 255
 19c:	a5 91       	lpm	r26, Z+
 19e:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
 1a0:	f9 01       	movw	r30, r18
 1a2:	ee 58       	subi	r30, 0x8E	; 142
 1a4:	ff 4f       	sbci	r31, 0xFF	; 255
 1a6:	25 91       	lpm	r18, Z+
 1a8:	34 91       	lpm	r19, Z
                cli();
		*reg &= ~bit;
		*out |= bit;
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
 1aa:	2f b7       	in	r18, 0x3f	; 63
                cli();
 1ac:	f8 94       	cli
		*reg |= bit;
 1ae:	ec 91       	ld	r30, X
 1b0:	e9 2b       	or	r30, r25
 1b2:	ec 93       	st	X, r30
		SREG = oldSREG;
 1b4:	2f bf       	out	0x3f, r18	; 63
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
	if (val == 0)
 1b6:	61 15       	cp	r22, r1
 1b8:	71 05       	cpc	r23, r1
 1ba:	19 f4       	brne	.+6      	; 0x1c2 <analogWrite+0x4a>
	{
		digitalWrite(pin, LOW);
 1bc:	60 e0       	ldi	r22, 0x00	; 0
	}
	else if (val == 255)
	{
		digitalWrite(pin, HIGH);
 1be:	0c 94 70 00 	jmp	0xe0	; 0xe0 <digitalWrite>
	pinMode(pin, OUTPUT);
	if (val == 0)
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
 1c2:	6f 3f       	cpi	r22, 0xFF	; 255
 1c4:	71 05       	cpc	r23, r1
 1c6:	11 f4       	brne	.+4      	; 0x1cc <analogWrite+0x54>
	{
		digitalWrite(pin, HIGH);
 1c8:	61 e0       	ldi	r22, 0x01	; 1
 1ca:	f9 cf       	rjmp	.-14     	; 0x1be <analogWrite+0x46>
	}
	else
	{
		switch(digitalPinToTimer(pin))
 1cc:	fa 01       	movw	r30, r20
 1ce:	ec 55       	subi	r30, 0x5C	; 92
 1d0:	ff 4f       	sbci	r31, 0xFF	; 255
 1d2:	e4 91       	lpm	r30, Z
 1d4:	e3 30       	cpi	r30, 0x03	; 3
 1d6:	19 f1       	breq	.+70     	; 0x21e <analogWrite+0xa6>
 1d8:	40 f4       	brcc	.+16     	; 0x1ea <analogWrite+0x72>
 1da:	e1 30       	cpi	r30, 0x01	; 1
 1dc:	b1 f0       	breq	.+44     	; 0x20a <analogWrite+0x92>
 1de:	e2 30       	cpi	r30, 0x02	; 2
 1e0:	c9 f0       	breq	.+50     	; 0x214 <analogWrite+0x9c>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
 1e2:	60 38       	cpi	r22, 0x80	; 128
 1e4:	71 05       	cpc	r23, r1
 1e6:	84 f7       	brge	.-32     	; 0x1c8 <analogWrite+0x50>
 1e8:	e9 cf       	rjmp	.-46     	; 0x1bc <analogWrite+0x44>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
 1ea:	e7 30       	cpi	r30, 0x07	; 7
 1ec:	11 f1       	breq	.+68     	; 0x232 <analogWrite+0xba>
 1ee:	e8 30       	cpi	r30, 0x08	; 8
 1f0:	41 f1       	breq	.+80     	; 0x242 <analogWrite+0xca>
 1f2:	e4 30       	cpi	r30, 0x04	; 4
 1f4:	b1 f7       	brne	.-20     	; 0x1e2 <analogWrite+0x6a>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
 1f6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
 1fa:	80 62       	ori	r24, 0x20	; 32
 1fc:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
				OCR1B = val; // set pwm duty
 200:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
 204:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
 208:	08 95       	ret
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
 20a:	84 b5       	in	r24, 0x24	; 36
 20c:	80 68       	ori	r24, 0x80	; 128
 20e:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
 210:	67 bd       	out	0x27, r22	; 39
 212:	08 95       	ret
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
 214:	84 b5       	in	r24, 0x24	; 36
 216:	80 62       	ori	r24, 0x20	; 32
 218:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
 21a:	68 bd       	out	0x28, r22	; 40
 21c:	08 95       	ret
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
 21e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
 222:	80 68       	ori	r24, 0x80	; 128
 224:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
				OCR1A = val; // set pwm duty
 228:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 22c:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
 230:	08 95       	ret
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
 232:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
 236:	80 68       	ori	r24, 0x80	; 128
 238:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
				OCR2A = val; // set pwm duty
 23c:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
 240:	08 95       	ret
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
 242:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
 246:	80 62       	ori	r24, 0x20	; 32
 248:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
				OCR2B = val; // set pwm duty
 24c:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
 250:	08 95       	ret

00000252 <micros>:
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
 252:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
 254:	f8 94       	cli
	m = timer0_overflow_count;
 256:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <timer0_overflow_count>
 25a:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <timer0_overflow_count+0x1>
 25e:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <timer0_overflow_count+0x2>
 262:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
 266:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 268:	a8 9b       	sbis	0x15, 0	; 21
 26a:	05 c0       	rjmp	.+10     	; 0x276 <micros+0x24>
 26c:	2f 3f       	cpi	r18, 0xFF	; 255
 26e:	19 f0       	breq	.+6      	; 0x276 <micros+0x24>
		m++;
 270:	01 96       	adiw	r24, 0x01	; 1
 272:	a1 1d       	adc	r26, r1
 274:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
 276:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
 278:	ba 2f       	mov	r27, r26
 27a:	a9 2f       	mov	r26, r25
 27c:	98 2f       	mov	r25, r24
 27e:	88 27       	eor	r24, r24
 280:	bc 01       	movw	r22, r24
 282:	cd 01       	movw	r24, r26
 284:	62 0f       	add	r22, r18
 286:	71 1d       	adc	r23, r1
 288:	81 1d       	adc	r24, r1
 28a:	91 1d       	adc	r25, r1
 28c:	42 e0       	ldi	r20, 0x02	; 2
 28e:	66 0f       	add	r22, r22
 290:	77 1f       	adc	r23, r23
 292:	88 1f       	adc	r24, r24
 294:	99 1f       	adc	r25, r25
 296:	4a 95       	dec	r20
 298:	d1 f7       	brne	.-12     	; 0x28e <micros+0x3c>
}
 29a:	08 95       	ret

0000029c <delay.constprop.1>:

void delay(unsigned long ms)
 29c:	8f 92       	push	r8
 29e:	9f 92       	push	r9
 2a0:	af 92       	push	r10
 2a2:	bf 92       	push	r11
 2a4:	cf 92       	push	r12
 2a6:	df 92       	push	r13
 2a8:	ef 92       	push	r14
 2aa:	ff 92       	push	r15
{
	uint32_t start = micros();
 2ac:	0e 94 29 01 	call	0x252	; 0x252 <micros>
 2b0:	6b 01       	movw	r12, r22
 2b2:	7c 01       	movw	r14, r24
 2b4:	92 e0       	ldi	r25, 0x02	; 2
 2b6:	89 2e       	mov	r8, r25
 2b8:	91 2c       	mov	r9, r1
 2ba:	a1 2c       	mov	r10, r1
 2bc:	b1 2c       	mov	r11, r1

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
 2be:	0e 94 29 01 	call	0x252	; 0x252 <micros>
 2c2:	6c 19       	sub	r22, r12
 2c4:	7d 09       	sbc	r23, r13
 2c6:	8e 09       	sbc	r24, r14
 2c8:	9f 09       	sbc	r25, r15
 2ca:	68 3e       	cpi	r22, 0xE8	; 232
 2cc:	73 40       	sbci	r23, 0x03	; 3
 2ce:	81 05       	cpc	r24, r1
 2d0:	91 05       	cpc	r25, r1
 2d2:	a8 f3       	brcs	.-22     	; 0x2be <delay.constprop.1+0x22>
			ms--;
			start += 1000;
 2d4:	28 ee       	ldi	r18, 0xE8	; 232
 2d6:	c2 0e       	add	r12, r18
 2d8:	23 e0       	ldi	r18, 0x03	; 3
 2da:	d2 1e       	adc	r13, r18
 2dc:	e1 1c       	adc	r14, r1
 2de:	f1 1c       	adc	r15, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
 2e0:	8a 94       	dec	r8
 2e2:	89 28       	or	r8, r9
 2e4:	8a 28       	or	r8, r10
 2e6:	8b 28       	or	r8, r11
 2e8:	29 f0       	breq	.+10     	; 0x2f4 <delay.constprop.1+0x58>
			ms--;
 2ea:	81 2c       	mov	r8, r1
 2ec:	91 2c       	mov	r9, r1
 2ee:	54 01       	movw	r10, r8
 2f0:	83 94       	inc	r8
 2f2:	e5 cf       	rjmp	.-54     	; 0x2be <delay.constprop.1+0x22>
			start += 1000;
		}
	}
}
 2f4:	ff 90       	pop	r15
 2f6:	ef 90       	pop	r14
 2f8:	df 90       	pop	r13
 2fa:	cf 90       	pop	r12
 2fc:	bf 90       	pop	r11
 2fe:	af 90       	pop	r10
 300:	9f 90       	pop	r9
 302:	8f 90       	pop	r8
 304:	08 95       	ret

00000306 <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
 306:	1f 92       	push	r1
 308:	0f 92       	push	r0
 30a:	0f b6       	in	r0, 0x3f	; 63
 30c:	0f 92       	push	r0
 30e:	11 24       	eor	r1, r1
 310:	2f 93       	push	r18
 312:	3f 93       	push	r19
 314:	8f 93       	push	r24
 316:	9f 93       	push	r25
 318:	af 93       	push	r26
 31a:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
 31c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <timer0_millis>
 320:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <timer0_millis+0x1>
 324:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <timer0_millis+0x2>
 328:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
 32c:	30 91 00 01 	lds	r19, 0x0100	; 0x800100 <_edata>

	m += MILLIS_INC;
	f += FRACT_INC;
 330:	23 e0       	ldi	r18, 0x03	; 3
 332:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
 334:	2d 37       	cpi	r18, 0x7D	; 125
 336:	58 f5       	brcc	.+86     	; 0x38e <__vector_16+0x88>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
 338:	01 96       	adiw	r24, 0x01	; 1
 33a:	a1 1d       	adc	r26, r1
 33c:	b1 1d       	adc	r27, r1
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
		m += 1;
	}

	timer0_fract = f;
 33e:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
	timer0_millis = m;
 342:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <timer0_millis>
 346:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <timer0_millis+0x1>
 34a:	a0 93 03 01 	sts	0x0103, r26	; 0x800103 <timer0_millis+0x2>
 34e:	b0 93 04 01 	sts	0x0104, r27	; 0x800104 <timer0_millis+0x3>
	timer0_overflow_count++;
 352:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <timer0_overflow_count>
 356:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <timer0_overflow_count+0x1>
 35a:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <timer0_overflow_count+0x2>
 35e:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <timer0_overflow_count+0x3>
 362:	01 96       	adiw	r24, 0x01	; 1
 364:	a1 1d       	adc	r26, r1
 366:	b1 1d       	adc	r27, r1
 368:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <timer0_overflow_count>
 36c:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <timer0_overflow_count+0x1>
 370:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <timer0_overflow_count+0x2>
 374:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <timer0_overflow_count+0x3>
}
 378:	bf 91       	pop	r27
 37a:	af 91       	pop	r26
 37c:	9f 91       	pop	r25
 37e:	8f 91       	pop	r24
 380:	3f 91       	pop	r19
 382:	2f 91       	pop	r18
 384:	0f 90       	pop	r0
 386:	0f be       	out	0x3f, r0	; 63
 388:	0f 90       	pop	r0
 38a:	1f 90       	pop	r1
 38c:	18 95       	reti
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
 38e:	26 e8       	ldi	r18, 0x86	; 134
 390:	23 0f       	add	r18, r19
		m += 1;
 392:	02 96       	adiw	r24, 0x02	; 2
 394:	a1 1d       	adc	r26, r1
 396:	b1 1d       	adc	r27, r1
 398:	d2 cf       	rjmp	.-92     	; 0x33e <__vector_16+0x38>

0000039a <main>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 39a:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 39c:	84 b5       	in	r24, 0x24	; 36
 39e:	82 60       	ori	r24, 0x02	; 2
 3a0:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 3a2:	84 b5       	in	r24, 0x24	; 36
 3a4:	81 60       	ori	r24, 0x01	; 1
 3a6:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 3a8:	85 b5       	in	r24, 0x25	; 37
 3aa:	82 60       	ori	r24, 0x02	; 2
 3ac:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 3ae:	85 b5       	in	r24, 0x25	; 37
 3b0:	81 60       	ori	r24, 0x01	; 1
 3b2:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 3b4:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
 3b8:	81 60       	ori	r24, 0x01	; 1
 3ba:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 3be:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 3c2:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
 3c6:	82 60       	ori	r24, 0x02	; 2
 3c8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 3cc:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
 3d0:	81 60       	ori	r24, 0x01	; 1
 3d2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 3d6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
 3da:	81 60       	ori	r24, 0x01	; 1
 3dc:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 3e0:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
 3e4:	84 60       	ori	r24, 0x04	; 4
 3e6:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 3ea:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
 3ee:	81 60       	ori	r24, 0x01	; 1
 3f0:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 3f4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 3f8:	84 60       	ori	r24, 0x04	; 4
 3fa:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
		sbi(ADCSRA, ADPS1);
 3fe:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 402:	82 60       	ori	r24, 0x02	; 2
 404:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
		sbi(ADCSRA, ADPS0);
 408:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 40c:	81 60       	ori	r24, 0x01	; 1
 40e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 412:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 416:	80 68       	ori	r24, 0x80	; 128
 418:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 41c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	
	setup();
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 420:	00 e0       	ldi	r16, 0x00	; 0
 422:	10 e0       	ldi	r17, 0x00	; 0
 424:	d0 e0       	ldi	r29, 0x00	; 0
 426:	c0 e0       	ldi	r28, 0x00	; 0
 428:	be 01       	movw	r22, r28
 42a:	89 e0       	ldi	r24, 0x09	; 9
 42c:	0e 94 bc 00 	call	0x178	; 0x178 <analogWrite>
 430:	0e 94 4e 01 	call	0x29c	; 0x29c <delay.constprop.1>
 434:	21 96       	adiw	r28, 0x01	; 1
 436:	c1 15       	cp	r28, r1
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	d8 07       	cpc	r29, r24
 43c:	a9 f7       	brne	.-22     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 43e:	d0 e0       	ldi	r29, 0x00	; 0
 440:	c0 e0       	ldi	r28, 0x00	; 0
 442:	be 01       	movw	r22, r28
 444:	8a e0       	ldi	r24, 0x0A	; 10
 446:	0e 94 bc 00 	call	0x178	; 0x178 <analogWrite>
 44a:	0e 94 4e 01 	call	0x29c	; 0x29c <delay.constprop.1>
 44e:	21 96       	adiw	r28, 0x01	; 1
 450:	c1 15       	cp	r28, r1
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	d8 07       	cpc	r29, r24
 456:	a9 f7       	brne	.-22     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 458:	d0 e0       	ldi	r29, 0x00	; 0
 45a:	c0 e0       	ldi	r28, 0x00	; 0
 45c:	be 01       	movw	r22, r28
 45e:	8b e0       	ldi	r24, 0x0B	; 11
 460:	0e 94 bc 00 	call	0x178	; 0x178 <analogWrite>
 464:	0e 94 4e 01 	call	0x29c	; 0x29c <delay.constprop.1>
 468:	21 96       	adiw	r28, 0x01	; 1
 46a:	c1 15       	cp	r28, r1
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	d8 07       	cpc	r29, r24
 470:	a9 f7       	brne	.-22     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 472:	cf ef       	ldi	r28, 0xFF	; 255
 474:	d0 e0       	ldi	r29, 0x00	; 0
 476:	be 01       	movw	r22, r28
 478:	89 e0       	ldi	r24, 0x09	; 9
 47a:	0e 94 bc 00 	call	0x178	; 0x178 <analogWrite>
 47e:	0e 94 4e 01 	call	0x29c	; 0x29c <delay.constprop.1>
 482:	21 97       	sbiw	r28, 0x01	; 1
 484:	c0 f7       	brcc	.-16     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 486:	cf ef       	ldi	r28, 0xFF	; 255
 488:	d0 e0       	ldi	r29, 0x00	; 0
 48a:	be 01       	movw	r22, r28
 48c:	8a e0       	ldi	r24, 0x0A	; 10
 48e:	0e 94 bc 00 	call	0x178	; 0x178 <analogWrite>
 492:	0e 94 4e 01 	call	0x29c	; 0x29c <delay.constprop.1>
 496:	21 97       	sbiw	r28, 0x01	; 1
 498:	c0 f7       	brcc	.-16     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 49a:	cf ef       	ldi	r28, 0xFF	; 255
 49c:	d0 e0       	ldi	r29, 0x00	; 0
 49e:	be 01       	movw	r22, r28
 4a0:	8b e0       	ldi	r24, 0x0B	; 11
 4a2:	0e 94 bc 00 	call	0x178	; 0x178 <analogWrite>
 4a6:	0e 94 4e 01 	call	0x29c	; 0x29c <delay.constprop.1>
 4aa:	21 97       	sbiw	r28, 0x01	; 1
 4ac:	c0 f7       	brcc	.-16     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 4ae:	01 15       	cp	r16, r1
 4b0:	11 05       	cpc	r17, r1
 4b2:	09 f4       	brne	.+2      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
 4b4:	b7 cf       	rjmp	.-146    	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 4b6:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 4ba:	b4 cf       	rjmp	.-152    	; 0x424 <__LOCK_REGION_LENGTH__+0x24>

000004bc <_exit>:
 4bc:	f8 94       	cli

000004be <__stop_program>:
 4be:	ff cf       	rjmp	.-2      	; 0x4be <__stop_program>
